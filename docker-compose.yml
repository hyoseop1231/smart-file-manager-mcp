services:
  # 메인 멀티미디어 API 서비스
  smart-file-manager-multimedia-v4:
    build:
      context: ./ai-services
      dockerfile: Dockerfile.multimedia
    container_name: smart-file-manager-multimedia-v4
    ports:
      - "8001:8001"
      - "9001:9001"
    volumes:
      - file-data:/data
      - ./ai-services:/app/ai-services
      - ${WATCH_DIRECTORIES:-./watch_directories}:/watch_directories:ro
    environment:
      - PYTHONUNBUFFERED=1
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DB_PATH=/data/db/file-index.db
      - EMBEDDINGS_PATH=/data/embeddings
      - METADATA_PATH=/data/metadata
      - REDIS_URL=redis://smart-file-redis-v4:6379
      - PORT=8001
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - INDEX_BATCH_SIZE=${INDEX_BATCH_SIZE:-100}
      - ENABLE_AI_VISION=${ENABLE_AI_VISION:-true}
      - ENABLE_STT=${ENABLE_STT:-true}
    depends_on:
      - smart-file-redis-v4
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - smart-file-network

  # Redis 캐시 서비스
  smart-file-redis-v4:
    image: redis:7-alpine
    container_name: smart-file-redis-v4
    ports:
      - "16379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - smart-file-network

  # Prometheus 모니터링
  smart-file-prometheus-v4:
    image: prom/prometheus:latest
    container_name: smart-file-prometheus-v4
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - smart-file-network

  # Grafana 대시보드
  smart-file-grafana-v4:
    image: grafana/grafana:latest
    container_name: smart-file-grafana-v4
    ports:
      - "3003:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    depends_on:
      - smart-file-prometheus-v4
    restart: unless-stopped
    networks:
      - smart-file-network

  # MCP 서버 (Claude Desktop 통합)
  smart-file-mcp-server-v4:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
    container_name: smart-file-mcp-server-v4
    volumes:
      - file-data:/data:ro
      - ${WATCH_DIRECTORIES:-./watch_directories}:/watch_directories:ro
    environment:
      - API_BASE_URL=http://smart-file-manager-multimedia-v4:8001
      - NODE_ENV=production
    depends_on:
      - smart-file-manager-multimedia-v4
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('healthy')"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - smart-file-network

  # Qdrant 벡터 데이터베이스 (선택적)
  smart-file-qdrant-v4:
    image: qdrant/qdrant:latest
    container_name: smart-file-qdrant-v4
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "/bin/bash -c 'echo > /dev/tcp/localhost/6333' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - smart-file-network

networks:
  smart-file-network:
    driver: bridge

volumes:
  file-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  qdrant-data:
    driver: local